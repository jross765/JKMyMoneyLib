package org.kmymoney.apiext.depot;

import java.time.LocalDate;
import java.time.LocalDateTime;

import org.kmymoney.api.basetypes.simple.KMMAcctID;
import org.kmymoney.api.numbers.FixedPointNumber;
import org.kmymoney.api.read.KMyMoneyAccount;
import org.kmymoney.api.read.KMyMoneyTransactionSplit;
import org.kmymoney.api.read.UnknownAccountTypeException;
import org.kmymoney.api.write.KMyMoneyWritableTransaction;
import org.kmymoney.api.write.KMyMoneyWritableTransactionSplit;
import org.kmymoney.api.write.impl.KMyMoneyWritableFileImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DepotTransactionManager {
    // Logger
    private static final Logger LOGGER = LoggerFactory.getLogger(DepotTransactionManager.class);
    
    private static void genBuyStockTrx(
	    final KMyMoneyWritableFileImpl kmmFile,
	    final KMMAcctID stockAcctID,
	    final KMMAcctID taxFeeAcctID,
	    final KMMAcctID offsetAcctID,
	    final FixedPointNumber nofStocks,
	    final FixedPointNumber stockPrc,
	    final FixedPointNumber taxesFees,
	    final LocalDate postDate,
	    final String descr) throws UnknownAccountTypeException {
	
	if ( kmmFile == null ) {
	    throw new IllegalArgumentException("null KMyMoney file given");
	}
		
	if ( stockAcctID == null  ||
	     taxFeeAcctID == null ||
	     offsetAcctID == null ) {
	    throw new IllegalArgumentException("null account ID given");
	}
	
	if ( ! ( stockAcctID.isSet()  ) ||
	     ! ( taxFeeAcctID.isSet() ) ||
	     ! ( offsetAcctID.isSet() ) ) {
	    throw new IllegalArgumentException("unset account ID given");
	}
		
	LOGGER.debug("genBuyStockTrx: Account 1 name (from): '" + kmmFile.getAccountByID(offsetAcctID).getQualifiedName() + "'");
	LOGGER.debug("genBuyStockTrx: Account 2 name (to):   '" + kmmFile.getAccountByID(stockAcctID).getQualifiedName() + "'");
	LOGGER.debug("genBuyStockTrx: Account 3 name (to):   '" + kmmFile.getAccountByID(taxFeeAcctID).getQualifiedName() + "'");

	// ---
	// Check account types
	KMyMoneyAccount stockAcct  = kmmFile.getAccountByID(stockAcctID);
	KMyMoneyAccount taxFeeAcct = kmmFile.getAccountByID(taxFeeAcctID);
	KMyMoneyAccount offsetAcct = kmmFile.getAccountByID(offsetAcctID);
	
	if ( stockAcct.getType() != KMyMoneyAccount.Type.STOCK ) {
	    throw new IllegalArgumentException("Account with ID " + stockAcctID + " is not of type " + KMyMoneyAccount.Type.STOCK);
	}

	if ( taxFeeAcct.getType() != KMyMoneyAccount.Type.EXPENSE ) {
	    throw new IllegalArgumentException("Account with ID " + taxFeeAcctID + " is not of type " + KMyMoneyAccount.Type.EXPENSE);
	}

	if ( offsetAcct.getType() != KMyMoneyAccount.Type.CHECKING ) {
	    throw new IllegalArgumentException("Account with ID " + offsetAcctID + " is not of type " + KMyMoneyAccount.Type.CHECKING);
	}

	// ---

	FixedPointNumber amtNet   = nofStocks.copy().multiply(nofStocks);
	LOGGER.debug("genBuyStockTrx: Net amount: " + amtNet);
	FixedPointNumber amtGross = amtNet.copy().add(taxesFees);
	LOGGER.debug("genBuyStockTrx: Gross amount: " + amtGross);

	// ---

	KMyMoneyWritableTransaction trx = kmmFile.createWritableTransaction();
	// Does not work like that: The description/memo on transaction
	// level is purely internal:
	// trx.setDescription(description);
	trx.setDescription("genBuyStockTrx: Generated by DepotTransactionManager, " + LocalDateTime.now());

	// ---

	KMyMoneyWritableTransactionSplit splt1 = trx.createWritableSplit(offsetAcct);
	splt1.setValue(new FixedPointNumber(amtGross.negate()));
	splt1.setShares(new FixedPointNumber(amtGross.negate()));
	// splt3.setPrice("1/1"); // completely optional
	// This is what we actually want (cf. above):
	splt1.setDescription(descr);
	LOGGER.debug("genBuyStockTrx: Split 1 to write: " + splt1.toString());

	// ---
	
	KMyMoneyWritableTransactionSplit splt2 = trx.createWritableSplit(stockAcct);
	splt2.setValue(new FixedPointNumber(amtNet));
	splt2.setShares(new FixedPointNumber(nofStocks));
	splt2.setPrice(stockPrc); // optional (sic), but advisable
	splt2.setAction(KMyMoneyTransactionSplit.Action.BUY_SHARES);
	// Cf. above
	splt2.setDescription(descr);
	LOGGER.debug("genBuyStockTrx: Split 2 to write: " + splt2.toString());

	// ---

	KMyMoneyWritableTransactionSplit splt3 = trx.createWritableSplit(taxFeeAcct);
	splt3.setValue(new FixedPointNumber(taxesFees));
	splt3.setShares(new FixedPointNumber(taxesFees));
	// splt3.setPrice("1/1"); // completely optional
	// Cf. above
	splt3.setDescription(descr);
	LOGGER.debug("genBuyStockTrx: Split 3 to write: " + splt3.toString());

	// ---

	trx.setDatePosted(postDate);
	trx.setDateEntered(LocalDate.now());

	// ---

	LOGGER.info("genBuyStockTrx: Transaction to write: " + trx.toString());
    }
    
}
